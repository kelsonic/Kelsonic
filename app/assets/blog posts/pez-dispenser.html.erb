<section class="blog-font blog-post">
  <p>Let's face it. Pez are pretty delicious. At Dev Bootcamp we created a 
  Pez Dispenser class in Ruby during the first phase of the bootcamp. I figured 
  it would be great to share some of its delicious-ness with you, so let's get 
  started.</p>
  
  <h3>User Stories</h3>
  
  <p>So before we start coding, there's a couple things we need to do. First, we need 
  'END-user stories.' By having these, we can understand exactly what we will need to 
  include in our program.</p>
  
  <p>I've written some out for us already: </p>
  
  <ol>
    <li>As a Pez user, I'd like to be able to <strong>"create" a new Pez dispenser</strong> with 
    a group of flavors that represent Pez so it's easy to start with a full Pez 
    dispenser.</li>
    
    <li>As a Pez user, I'd like to be able to easily <strong>count the number of Pez 
    remaining</strong> in a dispenser so I can know how many are left.</li>
    
    <li>As a Pez user, I'd like to be able to <strong>take a Pez</strong> from the dispenser so I 
    can eat it.</li>
    
    <li>As a Pez user, I'd like to be able to <strong>add a Pez</strong> to the dispenser so I 
    can save a flavor for later.</li>
    
    <li>As a Pez user, I'd like to be able to <strong>see</strong> all the flavors inside the 
    dispenser so I know the order of the flavors coming up.</li>
  </ol>
  
  <p>Great! Now that we have our user stories, only one more task before we can start 
  coding!</p>
  
  <h3>Pseudocode</h3>
  
  <pre><code># Create PezUser class
# 	start with empty array (pez dispenser)
# 	color name strings for each indivial
# 	index count for remaining pez

#  Create create method
#  	create a new empty pez dispenser
 
#  Create count method
#  	count items in given array
 
#  Create eat method
#  	remove the last item in the array
 
#  Create add method
#  	push an item (string color) to the array
 
#  Create show method
#  	print array</code></pre>

  <p>Although this might be pretty simple, it's the hardest part of any programming 
  challenge. Now all we have to do is translate the pseudocode into Ruby. Let's do 
  it!</p>
  
  <h3>Translating Pseudocode to Ruby</h3>
  
  <pre><code>class PezDispenser
	def initialize(flavors) # create to make a new dispenser.
		@dispenser = flavors
	end	

	def pez_count # count items in dispenser array, .count is more flexible than .length and can search specific items.
		@dispenser.count
	end
	
	def get_pez	# return and removes the last item in an array.
		@dispenser.pop
	end	

	def add_pez(flavor) # add flavor argument to array. 
		@dispenser.push(flavor)
	end	

	def see_all_pez #print to the array
		@dispenser
	end
end</code></pre>

  <h3>Driver Tests</h3>

  <p>Great! If you want to test your code to make sure it works, try using these 
  driver tests at the end of your Ruby file: </p>
  
  <pre><code>flavors = %w(cherry chocolate cola grape lemon orange peppermint raspberry strawberry).shuffle
super_mario = PezDispenser.new(flavors)
puts "A new pez dispenser has been created. You have #{super_mario.pez_count} pez!"
puts "Here's a look inside the dispenser:"
puts super_mario.see_all_pez
puts "Adding a banana pez."
super_mario.add_pez("banana")
puts "Now you have #{super_mario.pez_count} pez!"
puts "Oh, you want one do you?"
puts "The pez flavor you got is: #{super_mario.get_pez}"
puts "Now you have #{super_mario.pez_count} pez!"</code></pre>

  <p>In your terminal, if you run <code>ruby pez_dispenser_file_name.rb</code> it 
  should output something like this: </p>
  
  <pre><code>A new pez dispenser has been created. You have 9 pez!
Here's a look inside the dispenser:
raspberry
strawberry
orange
lemon
peppermint
chocolate
grape
cherry
cola
Adding a banana pez.
Now you have 10 pez!
Oh, you want one do you?
The pez flavor you got is: banana
Now you have 9 pez!</code></pre>
  
  <h3>Need the whole file?</h3>
  
  <p>Here is the entire file at the end of following each of these steps. Thanks 
  for reading!</p>
  
  <pre><code># 1. Review the following user stories:
# - As a Pez user, I'd like to be able to "create" a new Pez dispenser with a group of flavors that
#      represent Pez so it's easy to start with a full Pez dispenser.
# - As a Pez user, I'd like to be able to easily count the number of Pez remaining in a dispenser
#      so I can know how many are left.
# - As a Pez user, I'd like to be able to take a Pez from the dispenser so I can eat it.
# - As a Pez user, I'd like to be able to add a Pez to the dispenser so I can save a flavor for later.
# - As a Pez user, I'd like to be able to see all the flavors inside the dispenser so I know the order
#      of the flavors coming up.


# Pseudocode
# Create PezUser class
# 	start with empty array (pez dispenser)
# 	color name strings for each indivial
# 	index count for remaining pez

#  Create create method
#  	create a new empty pez dispenser
 
#  Create count method
#  	count items in given array
 
#  Create eat method
#  	remove the last item in the array
 
#  Create add method
#  	push an item (string color) to the array
 
#  Create show method
#  	print array


# Solution

class PezDispenser
	def initialize(flavors) # create to make a new dispenser.
		@dispenser = flavors
	end	

	def pez_count # count items in dispenser array, .count is more flexible than .length and can search specific items.
		@dispenser.count
	end
	
	def get_pez	# return and removes the last item in an array.
		@dispenser.pop
	end	

	def add_pez(flavor) # add flavor argument to array. 
		@dispenser.push(flavor)
	end	

	def see_all_pez #print to the array
		@dispenser
	end
end

# DRIVER TESTS GO BELOW THIS LINE

flavors = %w(cherry chocolate cola grape lemon orange peppermint raspberry strawberry).shuffle
super_mario = PezDispenser.new(flavors)
puts "A new pez dispenser has been created. You have #{super_mario.pez_count} pez!"
puts "Here's a look inside the dispenser:"
puts super_mario.see_all_pez
puts "Adding a banana pez."
super_mario.add_pez("banana")
puts "Now you have #{super_mario.pez_count} pez!"
puts "Oh, you want one do you?"
puts "The pez flavor you got is: #{super_mario.get_pez}"
puts "Now you have #{super_mario.pez_count} pez!"</code></pre>
  
</section>