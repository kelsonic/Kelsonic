<section class="blog-font blog-post">
  <p>Classes are extremely important in any object-oriented programming language, but it is particularly true for Ruby. Think of just about any object in the real-world, and Ruby can make it - but only if you know how to work with classes.</p>
  <p>To best understand classes, you have to understand how variables work in Ruby.</p>
  
  <h3>Ruby Variables</h3>
  
  <p><strong>Local Variables: </strong>variables that are defined within a method and whose scope pertains to only that method. They typically begin with a lower case letter or even an underscore ('_') on occasion.</p>
  <p><strong>Instance Variables: </strong> variables that are available for any instance of a class or object. Instance variables have an @ symbol in front of their name.</p>
  <p><strong>Class Variables: </strong>variables that are available across different objects within a class. It is typically a characteristic of a class. Class variables have two @ symbols in front of their name.</p>
  <p><strong>Global Variables: </strong>variables that have global scope and can be used across multiple classes. The global variable has a $ in front of its name.</p>
  
  <h3>Example</h3>
  
  <p>Now that we have mentioned the various types of variables, you're probably still wondering how you make a class.</p>
  <p>Ruby makes it simple: </p>
  
  <pre><code>class Cookie
end</code></pre>
  
  <p>Great! Now we can create instances of this method.</p>
  <p><pre><code>cookie1 = Cookie.new
cookie2 = Cookie.new</code></pre></p>
  <p>If you <code>puts cookie1, cookie2</code> to your irb, you will see something like this.</p>
  <pre><code>#<Context::Cookie:0x0000000c98948>
#<Context::Cookie:0x0000000c98920>
=> nil</code></pre>
  
  <p>This means that Ruby now sees <code>cookie1</code> and <code>cookie2</code> as objects of the <code>Cookie</code> class!</p>
  <p>You will notice, however, that the value returned is <code>nil</code> as the objects do not have any characteristics within them.</p>
  <p>Let's fix that.</p>
  
  <pre><code>class Cookie
  @@no_of_cookies = 0 # This is a class variable
  def initialize(type, recipe)
    @type = type
    @recipe = recipe
  end
end</code></pre>
  
  <p>Whoa. A lot just happened. Let's back up for a moment.</p>
  <p>If you want to have an object that has something more than just <code>nil</code> as its parameters, you need to declare an instance method called <em>initialize</em>.</p>
  <p>The <em>initialize</em> method is a little odd, as it is executed whenever the <code>.new</code> class method is called (in this case, with parameters).</p>
  <p>In this example, we defined our <em>initialize</em> method with the local variables <code>type</code> and <code>recipe</code>. We then pass these local variables to instance variables so that they can be used by other methods of the class later on.</p>
  
  <h3>Learn More</h3>
  
  <p>While this is just an introduction to Ruby classes, if you want to learn more about how to create them you should check out this <a href="http://www.tutorialspoint.com/ruby/ruby_classes.htm">great tutorial on Ruby classes</a>.</p>
</section>